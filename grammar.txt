
grammar Expr;
program : statement* ;
block : '{' statement* '}' ;
statement : class_statement 
			| function_statement
			| enum_statement
			| while_statement
			| do_while_statement
			| for_statement
			| if_statement
			| switch_statement
			| try_catch_statement

			| var_statement
			| return_statement 
			| break_statement
			| continue_statement
			| expr ;

class_statement : 'class' IDENTIFIER '{' class_body '}' ;
class_body : class_member* ; 
class_member : function_statement
			| var_statement ;

function_statement : 'function' IDENTIFIER '(' param_list? ')' block ;
param_list : expr (',' expr)* ;

enum_statement : 'enum' IDENTIFIER '{' enum_body '}' ;
enum_body : IDENTIFIER (',' IDENTIFIER)* ;

while_statement : 'while' '(' expr ')' block ;
do_while_statement : 'do' block 'while' '(' expr ')' ;
for_statement : 'for' '(' expr? ';' expr? ';' expr? ')' block ;

if_statement : 'if' '(' expr ')' block ('else' block)? ;
switch_statement : 'switch' '(' expr ')' '{' case_statement* '}' ;
case_statement : 'case' expr ':' expr* 'break' ;
try_catch_statement : 'try' block 'catch' '(' IDENTIFIER IDENTIFIER ')' block ;

return_statement : 'return' expr? ;
break_statement: 'break' ;
continue_statement: 'continue' ;

array_statement : var_statement '[' ']' ;
var_statement : number_statement | string_statement | bool_statement ;
number_statement : 'number' IDENTIFIER ('=' expr)? ;
string_statement : 'string' IDENTIFIER ('=' expr)? ;
bool_statement : 'bool' IDENTIFIER ('=' expr)? ;

line_comment : '//' .*? '\n' ;
block_comment : '/*' .*? '*/' ;

expr : '(' expr ')'
		
		| expr '++'
		| expr '--'
		| expr '.' expr

		| '++' expr
		| '--' expr
		| '+' expr
		| '-' expr
		| '!' expr
		| '~' expr
		
		| expr '*' expr
		| expr '/' expr
		| expr '%' expr
		| expr '+' expr
		| expr '-' expr
		
		| expr '<<' expr
		| expr '>>' expr

		| expr '<' expr
		| expr '>' expr
		| expr '<=' expr
		| expr '>=' expr

		| expr '==' expr
		| expr '===' expr
		| expr '!=' expr
		
		| expr '&' expr
		| expr '^' expr
		| expr '|' expr
		
		| expr '&&' expr
		| expr '||' expr
	
		| expr '?' expr ':' expr
		| expr '=' expr
		
		| expr '*=' expr
		| expr '/=' expr
		| expr '%=' expr
		| expr '+=' expr
		| expr '-=' expr
		
		| expr '<<=' expr
		| expr '>>=' expr
		
		| expr '^=' expr
		| expr '&=' expr
		| expr '|=' expr
		
		| expr ',' expr?

		| TRUE_LITERAL
		| FALSE_LITERAL
		| NULL_LITERAL
		| NUMBER_LITERAL
		| STRING_LITERAL
		| IDENTIFIER ;

TRUE_LITERAL : 'true' ;
FALSE_LITERAL : 'false' ;
NULL_LITERAL : 'null' ;
STRING_LITERAL : '(".*?")|('.*?')|(`.*?`)' ;
NUMBER_LITERAL : '[-]?(d+)?(.d+)?' ;
IDENTIFIER : '[a-zA-Z_][a-zA-Z0-9_]*' ;