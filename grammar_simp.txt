grammar Expr;

program : statement* ;

statement :
	assign_statement
	| variable_declaration_statement
	| expr ;

assign_statement :
	identifier '=' expr ;

variable_declaration_statement : 
	number_declaration_statement 
	| string_declaration_statement 
	| bool_declaration_statement ;

number_declaration_statement : 
	'number' identifier ('=' expr)? ;

string_declaration_statement : 
	'string' identifier ('=' expr)? ;

bool_declaration_statement : 
	'bool' identifier ('=' expr)? ;

expr : 
	additive_expr ;

additive_expr : 
	multiplicative_expr ('+' | '-' multiplicative_expr)* ;

multiplicative_expr : 
	unary_expr
	| unary_expr ('*' | '/' | '%' unary_expr)* ;

unary_expr : 
	postfix_expr 
	| ('++' | '--' | '+' | '-') prefix_expr ;

postfix_expr : 
	primary_expr
	| postfix_expr '++'
	| postfix_expr '--' ;

primary_expr :
	identifier
	| number
	| string
	| bool
	| '(' expr ')' ;

-- Terminals --
bool : 'true'
	| 'false' ;
identifier : '[a-zA-Z_][a-zA-Z0-9_]*' ;
number : '[-]?(d+)?(.d+)?' ;
string : '(".*?")|('.*?')|(`.*?`)' ;
